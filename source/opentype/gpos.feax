#**********************************
#
# Copyright (c) 1994-2024 SIL Global  (https://www.sil.org)
# Released under the MIT License (https://opensource.org/licenses/MIT)
#
#**********************************

# Three features are implemented: kern, mark, and mkmk. 
#
# As best we understand it, all shapers now work per the OT spec in regard to GPOS lookup order of 
# execution, namely that lookups for all enabled features are executed in one pass in lookup order.
#
# Note that prior to around September 2024, HarfBuzz executed mark attachment in a separate
# pass after all base adjustments, but this caused compatibility issues with CoreText and Uniscribe
# (see https://github.com/harfbuzz/harfbuzz/issues/4596)

# To make sure the newer Harfbuzz doesn't cause problems we now put all base-positioning lookups 
# (kern and, if we had it, curs) before any mark positioning lookups (mark, mkmk).


#**********************************
# GPOS (Positioning) lookups
#**********************************

#********************
# Base positioning (kerning) 

include(../../source/opentype/customKerning.feax); 

#********************
# Subtending mark positioning

# Would love to be able to do subtending marks as either cursive connection or mark attachment
# Cursive connection doesn't work because the width of the resultant cluster needs to be exactly the
# same as the subtending mark and unrelated to the widths of the digits.
# In Firefox at least, mark attachment works for 06DD (end of Ayah) and latin digits, but no other 
# marks or digits (the digits get reverse ordered by the attachment process).
# So we're back to using kerning

lookup SubtendingMarks {
  lookupflag IgnoreMarks ;
    # In Graphite we use mark attachment rules. However, in OpenType positioning digits on 
    # subtending marks has to be done with adjustments rather than attachment since for some 
    # engines the digits will ordered *before* the subtending mark.
    
    # Additionally, the adjustment value records depend on font face (e.g. bold vs regular). Therefore
    # we use feax extentions to calculate the value records based on glyph advancewidths and digit AP coordinates.
    
    # In each "do" template, the first rule is ordered for Uniscribe or HarfBuzz 'latin', the second for HarfBuzz 'arab'

    # Those that take 4 medium digits
    do for m = @c_4 ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; let x3 = x2 - w; let x4 = x3 - w;
    {
        pos $m  @DigitsAnyMedium' <$x1 $y $w 0> @DigitsAnyMedium' <$x2 $y $w 0>  @DigitsAnyMedium' <$x3 $y $w 0>  @DigitsAnyMedium' <$x4 $y $w 0> ;
        pos     @DigitsAnyMedium' <$x4 $y $w 0> @DigitsAnyMedium' <$x3 $y $w 0>  @DigitsAnyMedium' <$x2 $y $w 0>  @DigitsAnyMedium' <$x1 $y $w 0> $m ;
    }
    
    # Those that take 3 medium digits
    do for m = [ number-ar.3 year-ar.3 pagenumber-ar.3 samvat-ar.3 numbermark-ar.3 poundmarkabove-ar.3 piastremarkabove-ar.3 ] ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; let x3 = x2 - w;
    {
        pos $m  @DigitsAnyMedium' <$x1 $y $w 0>  @DigitsAnyMedium' <$x2 $y $w 0>  @DigitsAnyMedium' <$x3 $y $w 0> ;
        pos     @DigitsAnyMedium' <$x3 $y $w 0>  @DigitsAnyMedium' <$x2 $y $w 0>  @DigitsAnyMedium' <$x1 $y $w 0>  $m ;
    }

    # Those that take 3 small digits (default for @c_3)
    do for m = [ endofayah-ar.3 endofayah-ar.alt.3 endofayah-ar.altB.3  disputedendofayah-ar.3] ;
       let y = APy(m, "digitR") - APy("zero.small", "digitL");
       let w = -ADVx("zero.small"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; let x3 = x2 - w;
    {
        pos $m  @DigitsAnySmall' <$x1 $y $w 0>  @DigitsAnySmall' <$x2 $y $w 0>  @DigitsAnySmall' <$x3 $y $w 0> ;
        pos     @DigitsAnySmall' <$x3 $y $w 0>  @DigitsAnySmall' <$x2 $y $w 0>  @DigitsAnySmall' <$x1 $y $w 0>  $m ;
    }

    # Those that take 2 small digits
    do for m = [ disputedendofayah-ar.2 ] ;
       let y = APy(m, "digitR") - APy("zero.small", "digitL");
       let w = -ADVx("zero.small"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; 
    {
        pos $m  @DigitsAnySmall' <$x1 $y $w 0>  @DigitsAnySmall' <$x2 $y $w 0> ;
        pos     @DigitsAnySmall' <$x2 $y $w 0>  @DigitsAnySmall' <$x1 $y $w 0>  $m ;
    }

    # Those that take 2 medium digits (default for @c_2)
    do for m = @c_2 ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; 
    {
        pos $m  @DigitsAnyMedium' <$x1 $y $w 0>  @DigitsAnyMedium' <$x2 $y $w 0> ;
        pos     @DigitsAnyMedium' <$x2 $y $w 0>  @DigitsAnyMedium' <$x1 $y $w 0>  $m ;
    }
    
    # Those that take 1 small digit
    do for m = [ disputedendofayah-ar ] ;
       let y = APy(m, "digitR") - APy("zero.small", "digitL");
       let w = -ADVx("zero.small"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
    {
        pos $m  @DigitsAnySmall' <$x1 $y $w 0> ;
        pos     @DigitsAnySmall' <$x1 $y $w 0>  $m ;
    }

    # Those that take 1 medium digit (default)
    do for m = @cno_2 ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
    {
        pos $m @DigitsAnyMedium' <$x1 $y $w 0> ;
        pos    @DigitsAnyMedium' <$x1 $y $w 0> $m ;
    }
 
} SubtendingMarks;


# Lateef only; others have an empty lookup

lookup KernPairs {
  lookupflag IgnoreMarks;
  ifinfo(familyName, "Lateef") {
    kernpairs;
  }
} KernPairs;



#********************
# Mark positioning

lookup MarkToBase {
  lookupflag 0;
    pos  base @diaA  mark @_diaA;
    pos  base @diaB  mark @_diaB;
    pos  base @diaO  mark @_diaO;
} MarkToBase;

# Override mark positioning in the case of dagger-alef on certain chars:
lookup AlefToBase {
  lookupflag 0;
    pos  base @alef  mark @_alef;
} AlefToBase;


lookup MarkToLig {
  lookupflag 0;
    pos ligature @LamAlefLig            @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefWaslaLig       @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefWavyHAboveLig  @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefWavyHBelowLig  @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefTwoAboveLig    @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefThreeAboveLig  @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
#   pos ligature lam_alefHamzabelow-ar  @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
#             ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
} MarkToLig;


# Scheherazade only: use the dia2B AP when you have two diacritics below a lam-alef.

lookup _mark2_to_base {
  lookupflag 0;
do let f = info("familyName");
   if f.find("Scheherazade New") != -1 ; {
    # Class are not expanded recursively, so enumerate them. :-(
    pos ligature @LamAlefLig             @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
    pos ligature @LamAlefWaslaLig        @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
    pos ligature @LamAlefWavyHAboveLig   @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
    pos ligature @LamAlefWavyHBelowLig   @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
    pos ligature @LamAlefTwoAboveLig     @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
    pos ligature @LamAlefThreeAboveLig   @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
#   pos ligature @lam_alefHamzabelow-ar  @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
  }
} _mark2_to_base;

lookup LamAlefMark2Adjust {
  lookupflag UseMarkFilteringSet @MarksBelow;
  ifinfo(familyName, "Scheherazade New") {
    pos @AllLamAlefLig  @MarksBelow  @MarksBelow' lookup _mark2_to_base;
  }
} LamAlefMark2Adjust;


#********************
# Mark-to-mark attachment

@MarkFilter_diaA = [@diaA_MarkBase @_diaA];
lookup MarkToMarkAbove {
  lookupflag UseMarkFilteringSet @MarkFilter_diaA;
    pos mark @diaA_MarkBase mark @_diaA;
} MarkToMarkAbove;

@MarkFilter_diaB = [@diaB_MarkBase @_diaB];
lookup MarkToMarkBelow {
  lookupflag UseMarkFilteringSet @MarkFilter_diaB;
    pos mark @diaB_MarkBase mark @_diaB;
} MarkToMarkBelow;


#********************
# Mark adjustments after attachment


# OBSOLETE - Harmattan and Lateef
#do let f = info("familyName");
#   if f.find("Harmattan") != -1; {}

# TODO: Determine whether needed and, if so, correct implemetation
#
#lookup Mark2ToBase {
#  lookupflag 0;
#  pos base @dia2B mark @_diaB;
#} Mark2ToBase;
#
# move MarksBelow slightly left on lam-alef when appropriate:
# lookup AlefMark2BelowAfterLam {
#   lookupflag UseMarkFilteringSet @MarksBelow ;
#     pos [lamThreedotsbelow-ar.init.preAlef @MarksBelow] @dia2B' lookup Mark2ToBase @MarksBelow' ;
#     pos [lamThreedotsbelow-ar.init.preAlef @MarksBelow] @dia2B' lookup Mark2ToBase @MarksAbove' @MarksBelow' ;
#     pos [lamThreedotsbelow-ar.init.preAlef @MarksBelow] @MarksAbove @dia2B' lookup Mark2ToBase @MarksBelow' ;
#     pos [lamThreedotsbelow-ar.init.preAlef @MarksBelow] @MarksAbove @dia2B' lookup Mark2ToBase @MarksAbove' @MarksBelow' ;
#     #pos @MarksBelow @AllAlefFinAfterLam @MarksBelow' <-50 0 0 0> ;
#     #pos lamThreedotsbelow-ar.init.preAlef @AllAlefFinAfterLam @MarksBelow' <-50 0 0 0> ;
#     # Unneeded in Harmattan design:
#     #pos lamThreedotsbelow-ar.medi.preAlef @AllAlefFinAfterLam @MarksBelow' <-50 0 0 0> ;
# } AlefMark2BelowAfterLam;

#}    # end do - Harmattan


# Lateef only; others have an empty lookup

# Increase vertical separation between maddah and fatha for sequences like:
# alefMaddah + lam-initial + fatha (for all initial lam-like glyphs that have 
# no nukta above) [ABS-2762]
lookup RaiseMadda {
  lookupflag 0;
  ifinfo(familyName, "Lateef") {
    pos [alef-ar alef-ar.fina] madda-ar' <0 -40 0 0 >  [lam-ar.init lamThreedotsbelow-ar.init lamBar-ar.init lamDoublebar-ar.init]' fatha-ar' <0 100 0 0>;
  }
} RaiseMadda ;


#---  mark positioning (cont'd)  ---

include(../../source/opentype/customShifting.feax);



#**********************************
#  GPOS FEATURES
#**********************************


feature kern {  # Kerning
    # Same behavior for latin & arabic:
        lookup SubtendingMarks;
        lookup KernPairs;       # Lateef

  # Scheherazade lookups:
  do let f = info("familyName");
   if f.find("Scheherazade New") != -1 and opt("nokern") != "yes"; {
   # start of kerning positioning
        lookup RehWawKerning1;  # a separate lookup to handle chains
        lookup RehWawKerning;
        lookup LamAlefKerning;
        lookup AlefMarksAbove;
        lookup MiscKerning;
        lookup MiscKerningWDiacs;
        lookup ToothKashidaKerningIM;
        lookup ToothKashidaKerningMM;
        lookup ToothKashidaKerningIMF;
        lookup MiscKashidaKerning;
        
        # after mark attachment:
        lookup DiacShifting;
  }   # SchNew and not nokern

  # Lateef lookups:
  do let f = info("familyName");
     if f.find("Lateef") != -1; {
        lookup AlefMarksAbove;
        lookup OldStyleKerning;
  }   # Lateef

  # Harmattan:
  do let f = info("familyName");
    if f.find("Harmattan") != -1; {
      script arab;  # Arabic
    }
    if f.find("Harmattan") != -1 and opt("noOTkern") == ""; {
      lookup mainkern;   # Graphite-based kerning
    }
    if f.find("Harmattan") != -1; {
      lookup AlefMarksAbove;
      # Force other languages to include Arabic script lookups:
      language KIR  ;
      language KSH ;
      language KUR  ;
      language RHG  ;
      language SND  ;
      language URD  ;
      language WLF  ;
    }
  # Harmattan

} kern ;

feature mark {  # Mark to base Positioning
    # Same for latin & arabic:
        lookup MarkToBase;
        lookup AlefToBase;
        lookup RaiseMadda;    # Lateef
    script arab;
        lookup MarkToLig;
        lookup LamAlefMark2Adjust;  # empty except in Sch
#        lookup AlefMark2BelowAfterLam;  -- obsolete, Har & Lateef
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KSH ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} mark ;

feature mkmk {  # Mark to mark Positioning
    # Same for latin & arabic:
        lookup MarkToMarkAbove;
        lookup MarkToMarkBelow;
} mkmk ;
