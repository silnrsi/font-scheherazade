#**********************************
# This file is part of Scheherazade font family (https://software.sil.org/scheherazade/) 
# and is Copyright (c) 1994-2024 SIL International (https://www.sil.org/),
# with Reserved Font Names "Scheherazade" and "SIL".
#
# This Font Software is licensed under the SIL Open Font License, Version 1.1.
#
# You should have received a copy of the license along with this Font Software.
# If this is not the case, go to (https://openfontlicense.org/) for all the
# details including an FAQ.
#**********************************

# This file performs the kerning that is needed for collision avoidance.

#---  kern feature  ---

do if opt("nokern") != "yes";
{  # start of collision kerning

#********
# Kerning for collision avoidance

@RehKernAlefOrOther = [@RehKernAlef @RehKernOther];
@RehKernAlefOrMB = [@RehKernAlef @RehKernOtherMB];
@RehKernMost = [@RehKernOther @RehKernOtherMB];

@AlefForms = [alef-ar alef-ar.fina];
@AlefDigit = [alefTwoabove-ar alefThreeabove-ar alefTwoabove-ar.fina alefThreeabove-ar.fina];

lookup _kern50 {
  pos @RehWawAll    <50 0  50 0>;
  pos highhamza-ar  <50 0  50 0>;
} _kern50;

lookup _kern70 {
  pos @RehWawAll  <70 0  70 0>;
} _kern70;

lookup _kern90 {
  pos @Tooth2wAboveInit  <90 0  90 0>;
  pos @AllLamAlefLig     <90 0 90 0>;
} _kern90;

lookup _kern100 {
  pos @Tooth1hBelow <100 0  100 0>;
  pos @Tooth2hBelow <100 0  100 0>;
  pos teheh-ar.init <100 0  100 0>;
  pos @KafLikeInit  <100 0  100 0>;
} _kern100;

lookup _kern130 {
  pos @RehWawAll      <130 0  130 0>;
  pos @ToothPlusAbove <130 0  130 0>;
  pos @AlefForms      <130 0  130 0>;
  pos highhamza-ar    <130 0  130 0>;
} _kern130;

lookup _kern140 {
  pos @Tooth  <140 0  140 0>;
} _kern140;

lookup _kern150 {
  pos @RehWawAll  <150 0  150 0>;
} _kern150;

lookup _kern170 {
  pos @RehWawAll         <170 0  170 0>;
  pos @Tooth2wBelowRstrk <170 0  170 0>;
  pos @AlefForms         <170 0  170 0>;
} _kern170;

lookup _kern215 {
  pos @RehWawAll           <215 0  215 0>;
} _kern215;

lookup _kern290 {
  pos @RehWawTighten       <290 0  290 0>;
  pos @RehLikeNothingBelow <290 0  290 0>;
} _kern290;

lookup _kern_190 {
  pos @RehWawTighten <-190 0  -190 0>;
} _kern_190;

lookup _kern_215 {
  pos @RehWawTighten <-215 0  -215 0>;
} _kern_215;

lookup _kern_290 {
  pos @RehWawTighten <-290 0  -290 0>;
} _kern_290;

lookup _kern_300 {
  pos ae-ar       <-300 0  -300 0>;
  pos ae-ar.fina  <-300 0  -300 0>;
} _kern_300;

lookup _kern_380 {
  pos @RehWawTighten <-380 0  -380 0>;
} _kern_380;

lookup _kern_410 {
  pos @RehWawTighten <-410 0  -410 0>;
} _kern_410;

lookup _kern_550 {
  pos @RehWawTighten <-550 0  -550 0>;
} _kern_550;

lookup _kern_580 {
  pos @RehWawTighten <-580 0  -580 0>;
} _kern_580;


# Break this into a separate lookup to handle a sequence like waw + reh + alef
lookup RehWawKerning1 {
  lookupflag IgnoreMarks;
  
ifinfo(styleName, "Bold") {
  pos @WawLike' lookup _kern50  @RehLikeIsol; 
}
ifinfo(styleName, "Regular|Medium") {
  # bogus, but it seems to be needed to make the build happy:
  ignore pos @WawLike' @RehLikeIsol;
}
  # standard spacing is pretty good - don't futz with it.
  #ignore pos @RehWawAll'  @RehWawAll;
} RehWawKerning1;


lookup RehWawKerning {
  # does not ignore diacritics
  
  # Tighten to following gaf-like
ifinfo(styleName, "Bold") {  # or SemiBold
  pos @RehWawTighten' lookup _kern_380                @RehKernKaf ;
  pos @RehWawTighten' lookup _kern_380 @_diaB         @RehKernKaf ;
  pos @RehWawTighten' lookup _kern_380 @_diaB @_diaB  @RehKernKaf ;
}
ifinfo(styleName, "Regular|Medium") {
  # eg 06C7 06A9
  pos u-ar' lookup _kern_410                @RehKernKaf ;  # special case
  pos u-ar' lookup _kern_410 @_diaB         @RehKernKaf ;
  pos u-ar' lookup _kern_410 @_diaB @_diaB  @RehKernKaf ;

  # eg 0648 06A9
  pos @RehWawTighten' lookup _kern_550                @RehKernKaf ;
  pos @RehWawTighten' lookup _kern_550 @_diaB         @RehKernKaf ;
  pos @RehWawTighten' lookup _kern_550 @_diaB @_diaB  @RehKernKaf ;
}

  # Loosen from following alef/lam when it has something below it
  pos reh-ar' lookup _kern290                      alefWavyhamzabelow-ar ;
  pos reh-ar' lookup _kern290 @MarksAny            alefWavyhamzabelow-ar ;
  pos reh-ar' lookup _kern290 @MarksAny @MarksAny  alefWavyhamzabelow-ar ;
    
  pos @RehWawAll' lookup _kern215                      @AlefLamWBelow ;
  pos @RehWawAll' lookup _kern215 @MarksAny            @AlefLamWBelow ;
  pos @RehWawAll' lookup _kern215 @MarksAny @MarksAny  @AlefLamWBelow ;
  
  pos @RehWawAll' lookup _kern215                      @AlefIso @_diaB ;
  pos @RehWawAll' lookup _kern215 @MarksAny            @AlefIso @_diaB ;
  pos @RehWawAll' lookup _kern215 @MarksAny @MarksAny  @AlefIso @_diaB ;
  
  # Loosen from following narrow initials with something below:
  pos @RehWawAll' lookup _kern130                      @NarrowIni @_diaB ;
  pos @RehWawAll' lookup _kern130 @MarksAny            @NarrowIni @_diaB ;
  pos @RehWawAll' lookup _kern130 @MarksAny @MarksAny  @NarrowIni @_diaB ;

ifinfo(styleName, "Bold") {
  # Loosen from following narrow initials with dots below:
  pos @RehWawAll' lookup _kern150                      @Tooth2wBelowInit ;
  pos @RehWawAll' lookup _kern150 @MarksAny            @Tooth2wBelowInit ;
  pos @RehWawAll' lookup _kern150 @MarksAny @MarksAny  @Tooth2wBelowInit ;
}

  # Leave certain cases alone:
  ignore pos @RehWawTighten'                       @RehKernAlefOrOther @_diaB ;                            
  ignore pos @RehWawTighten' @MarksAny             @RehKernAlefOrOther @_diaB ;                            
  ignore pos @RehWawTighten' @MarksAny @MarksAny   @RehKernAlefOrOther @_diaB ;
  
  ignore pos @RehWawTighten' @_diaA               @RehKernOtherMA ;
  ignore pos @RehWawTighten' @MarksAny @_diaA     @RehKernOtherMA ;
  
  # Kirghiz-OE (waw-loop) has a different shape:
  ignore pos kirghizoe-ar' noon-ar;
  ignore pos kirghizoe-ar' yehbarree-ar;
  ignore pos kirghizoe-ar.fina' noon-ar;
  ignore pos kirghizoe-ar.fina' yehbarree-ar;

  # Otherwise tighten against most things:
  pos @RehWawTighten' lookup _kern_190                @RehKernAlef;
  pos @RehWawTighten' lookup _kern_190 @_diaB         @RehKernAlef;
  pos @RehWawTighten' lookup _kern_190 @_diaB @_diaB  @RehKernAlef;
  
  pos @RehWawTighten' lookup _kern_190                      @RehKernMost;  #@RehKernOther + @RehKernOtherMB
  pos @RehWawTighten' lookup _kern_190 @MarksAny            @RehKernMost;
  pos @RehWawTighten' lookup _kern_190 @MarksAny @MarksAny  @RehKernMost;
  
  ignore pos @RehWawTighten'                      @AinLikeInit @_diaB;
  ignore pos @RehWawTighten' @MarksAny            @AinLikeInit @_diaB;
  ignore pos @RehWawTighten' @MarksAny @MarksAny  @AinLikeInit @_diaB;
  
  pos @RehWawTightenToAin' lookup _kern_215                      @AinLikeInit;
  pos @RehWawTightenToAin' lookup _kern_215 @MarksAny            @AinLikeInit;
  pos @RehWawTightenToAin' lookup _kern_215 @MarksAny @MarksAny  @AinLikeInit;
  
  pos @RehWawTightenToAinX' lookup _kern_290                      @AinLikeInit;
  pos @RehWawTightenToAinX' lookup _kern_290 @MarksAny            @AinLikeInit;
  pos @RehWawTightenToAinX' lookup _kern_290 @MarksAny @MarksAny  @AinLikeInit;
  
  pos @RehWawTightenToAinIsol' lookup _kern_580                      @AinLikeIsol;
  pos @RehWawTightenToAinIsol' lookup _kern_580 @MarksAny            @AinLikeIsol;
  pos @RehWawTightenToAinIsol' lookup _kern_580 @MarksAny @MarksAny  @AinLikeIsol;
    
} RehWawKerning;

lookup LamAlefKerning {
  lookupflag IgnoreMarks;

ifinfo(styleName, "Bold") {  # and SemiBold
    pos @AllLamAlefLig <-30 0 -30 0>  @LamAlefKern;
}
ifinfo(styleName, "Regular|Medium") {
    # eg 0644 0627 0645/0631
    pos @AllLamAlefLig <-70 0 -70 0>  @LamAlefKern;
}

} LamAlefKerning;

lookup MiscKerning {
  lookupflag IgnoreMarks;
    pos @AlefForms' lookup _kern70  rreh-ar;
    
    # beh + reh-stroke
    pos @Tooth1hBelow' lookup _kern100  rehStroke-ar.fina;
    pos @Tooth2hBelow' lookup _kern100  rehStroke-ar.fina;  

    pos highhamza-ar' lookup _kern130  @Tooth2wAboveInit;

} MiscKerning;

lookup MiscKerningWDiacs {
  # does not ignore diacritics
  
    # alef-maddah + gaf
    pos @AlefForms' lookup _kern130  madda-ar.small  @GafIsolInit;      # also see shift rules below
    pos @AlefForms' lookup _kern170  madda-ar        @GafIsolInit;
    pos @AlefForms' lookup _kern170  madda-ar        @LamLikeIsolInit;

    # beh-like + something above + reh-tah
    pos @Tooth' lookup _kern140  @MarksAbove  rehTwodotshorizontalaboveTahabove-ar.fina;  # also see shift rule below
    
    # AE + kaf
    pos ae-ar'      lookup _kern_300          @KafLikeInit;
    pos ae-ar'      lookup _kern_300  @_diaB  @KafLikeInit;
    pos ae-ar.fina' lookup _kern_300          @KafLikeInit;
    pos ae-ar.fina' lookup _kern_300  @_diaB  @KafLikeInit;
    
    # Also the diac is shifted down later:
    pos @RehLikeNothingBelow' lookup _kern290  @_diaB  @AinLikeIsol;
} MiscKerningWDiacs;

# Note that shifting in RTL works the opposite in OpenType compared to Graphite.

#********
# Kashida kerning for yeh/peh forms, etc.

# When we kern the kashida, we shift it a bit further to the right, just to avoid it hanging too far
# off the left edge of the following glyph. Not really necessary, but a precaution.
# (In Graphite we do this by splitting the kerning between the kashida and the following glyph.)

# Using separate lookups for initial-medial and medial-medial allows us to handle a chain of these.

lookup _kkern_40 {
  pos absAutoKashida     <-20 0  -40 0>;
} _kkern_40;

lookup _kkern_60 {
  pos absAutoKashida     <-30 0  -60 0>;
} _kkern_60;

lookup _kkern_80 {
  pos absAutoKashida     <-40 0  -80 0>;
} _kkern_80;

lookup _kkern_100 {
  pos absAutoKashida     <-50 0  -100 0>;
} _kkern_100;

lookup _kkern_120 {
  pos absAutoKashida     <-60 0  -120 0>;
} _kkern_120;

lookup _kkern_140 {
  pos absAutoKashida     <-70 0  -140 0>;
} _kkern_140;

lookup _kkern_160 {
  pos absAutoKashida     <-80 0  -160 0>;
} _kkern_160;

lookup _kkern_180 {
  pos absAutoKashida     <-90 0  -180 0>;
} _kkern_180;

lookup _kkern_240 {
  pos absAutoKashida     <-120 0  -240 0>;
} _kkern_240;


lookup ToothKashidaKerningIM {
  lookupflag IgnoreMarks;
    ignore pos @Tooth2wwBelowInit absAutoKashida'  @Tooth2wwBelowMedi;  # doesn't need kerning
ifinfo(styleName, "Regular|Medium") {
    # eg 0750 0750 0628
    pos @Tooth3wBelowInit  absAutoKashida' lookup _kkern_60   absAutoKashida   @Tooth3wBelowMedi;  # REGULAR ONLY
}
    pos @Tooth2wBelowInit  absAutoKashida' lookup _kkern_140  absAutoKashida   @Tooth3wBelowMedi;
    pos @Tooth2wBelowInit  absAutoKashida' lookup _kkern_80   @Tooth2wBelowMedi;
    
ifinfo(styleName, "Bold") {
    pos @Tooth2wBelowMedi absAutoKashida' lookup _kkern_60   @Tooth2wBelowMedi;  # BOLD
    pos @Tooth2wAboveMedi absAutoKashida' lookup _kkern_60   @Tooth2wAboveMedi;  # BOLD
    
    pos @Tooth2wAboveInit'  absAutoKashida' lookup _kkern_100  @FehQaf2wAboveMedi;  # BOLD
    pos @FehQaf2wAboveInit' absAutoKashida' lookup _kkern_60   @FehQaf2wAboveMedi;  # BOLD    
    
    pos teheh-ar.init' lookup _kern100  teheh-ar.medi;
    
    # teh + waw w/ something above
    pos @Tooth2wAboveInit' lookup _kern90  @WawLikeFinaMA;  # no kashida
    
    # kaf + teh
    pos @KafLikeInit' lookup _kern100  @Tooth2wAboveMedi;   # no kashida
    
    pos @AllLamAlefLig'  lookup _kern90  @Tooth2wAboveInit;
}

} ToothKashidaKerningIM;

lookup ToothKashidaKerningMM {
  lookupflag IgnoreMarks;
ifinfo(styleName, "Regular|Medium") {
    # eg 0628 0750 0750 0628
    pos @Tooth3wBelowMedi  absAutoKashida' lookup _kkern_60   absAutoKashida   @Tooth3wBelowMedi;  # REGULAR ONLY
}
    pos @Tooth2wBelowMedi  absAutoKashida' lookup _kkern_140  absAutoKashida  @Tooth3wBelowMedi;
    
ifinfo(styleName, "Bold") {
    pos @FehQaf2wAboveMedi' absAutoKashida' lookup _kkern_240  @FehQaf2wAboveMedi;  # BOLD    
}

} ToothKashidaKerningMM;

lookup ToothKashidaKerningIMF {
  lookupflag IgnoreMarks;
    pos @Tooth2wBelowInit  absAutoKashida' lookup _kkern_80  @YehLikeFina;
    
    pos @Tooth absAutoKashida' lookup _kkern_100  tehMarbuta-ar.fina;
} ToothKashidaKerningIMF;

lookup MiscKashidaKerning {
  lookupflag IgnoreMarks;
    pos @KafLikeInitMedi   absAutoKashida' lookup _kkern_120  @RnoonLikeNarrow;
    pos @JeemLikeInitMedi  absAutoKashida' lookup _kkern_120  @RnoonLikeNarrow;
    pos noon-ar.medi       absAutoKashida' lookup _kkern_120  @RnoonLikeNarrow;
    
    #pos @Tooth2wBelowRstrk      absAutoKashida' lookup _kkern_180  rehStroke-ar.fina; 
} MiscKashidaKerning;

}  # end of do - collision kerning


